The Linux Foundation
The Linux Foundation

Using Open Source Code
オープン ソース コードの使用
#用語 "オープン ソース"は "オープンソース" としてほしかった以下同じ：用語問題

One of the most important responsibilities of an open source program office is ensuring that your organization meets its legal obligations when integrating open source code with proprietary and third-party source code in your commercial products.
オープン ソース プログラム オフィスの最も重要な責務の 1 つは、オープン ソース コードを商品のプロプライエタリ ソース コードやサードパーティ ソース コードと統合する際に、組織が確実に法的義務を果たすようにすることです。
#翻訳　商用の　は commercial products なので "商用製品" とすべき 
#プロプライエタリソースコードは、プロプライエタリなソースコード

You need to establish guidelines on how developers can use open source code, and detailed processes to track where open source code is coming from, how it’s licensed, and where it ultimately ends up.
開発者がオープン ソース コードをどのように使用できるかのガイドライン、およびオープン ソース コードの出所がどこで、どのようにライセンスされ、最終的にどう使用されるかを追跡する詳細なプロセスを確立する必要があります。

This guide gets you started with a baseline compliance program for using, releasing, and distributing open source code.
このガイドでは、オープン ソース コードを使用、リリース、配布するためのベースライン コンプライアンス プログラムについて説明します。

Contents
目次

1.

Why track and review code
コードの追跡とレビューの必要性

2.

Compliance roles and responsibilities
コンプライアンスにおける役割と責任

3.

A simple policy for using open source code
オープン ソース コードのシンプルな利用ポリシー
#翻訳 policy for using open source code なので オープンソースコード利用のためのシンプルなポリシー


4.

Five-stage code review process
5 段階のコード レビュー プロセス

5.

What to do after v1.0
バージョン 1.0 後のプロセス

6.

Sample open source usage request form
オープン ソース利用申請フォーム サンプル

7.

Final words
終わりに

8.

Architecture diagram template
アーキテクチャ概略図テンプレート

View All Guides »
すべてのガイドを表示 »

Contribute on GitHub »
GitHub に貢献する »

Contributors to this Guide
本ガイドの貢献者

Ibrahim Haddad
Ibrahim Haddad

VP of R&D and Head of the Open Source Group
Samsung Research America 社

Samsung Research America
R&D 担当 VP 兼オープン ソース グループ長
#翻訳 米国企業の役職は日本語に翻訳しますか？ 誤って翻訳するとその企業に失礼

--------------------------------

Section 1
セクション 1

Why track and review code?
コードの追跡とレビューの必要性

Simply stated, if your company isn’t tracking how and where its developers use open source code, you’re at risk of non compliance with applicable open source licenses — this can be an expensive path to go through both in terms of legal fees and engineering time spent to correct the error.
単純な話として、開発者がオープン ソース コードをどこでどのように使用しているかを把握してない企業は、適用されるオープン ソース ライセンスに違反する恐れがあります。これは、弁護士費用の点でも、エラーの修正に費やされるエンジニアリング時間の点でもコストがかかる結果になる可能性があります。
#翻訳 legal fees が弁護士費用とするのは範囲が狭すぎるのではないか、engineering time spent to correct the error はエラーの修正ではなく、失敗の修正　とすべきでこれも範囲が狭い翻訳になっている

Ignoring your open source legal obligations also has repercussions for your company’s reputation in the open source community.
また、オープン ソースの法的義務を無視することは、オープン ソース コミュニティ内で企業の評判を損なうことにもなります。

An open source program office helps centralize policies and decision-making around open source consumption, distribution, and release, tracks code provenance and use, and ensures the organization doesn’t run afoul of its compliance obligations.
オープン ソース プログラム オフィスは、オープン ソースの使用、配布、リリースに関わるポリシーおよび意思決定の一元化を支援し、コードの出所と使用を追跡して、組織がコンプライアンス義務に違反しないようにします。

Ideally, your open source program includes a complete compliance program, developed with the help of your legal counsel.
オープン ソース プログラムが包括的なコンプライアンス プログラムを含み、法務専門家の協力を得て開発されていることが理想的です。
#てにをは オープンソースプログラムが -> は

In this guide, we’ll cover one important aspect of your compliance program: your policy and processes for using, releasing, and distributing open source code.
このガイドでは、コンプライアンス プログラムの重要な側面、つまりオープン ソース コードを使用、リリース、配布するためのポリシーとプロセスについて説明します。

“A well-designed open source compliance process should simultaneously ensure compliance with the terms of open source licenses and also help companies protect their own intellectual property and that of third-party suppliers from unintended disclosure and/or other consequences.”
「うまく設計されたオープン ソース コンプライアンス プロセスは、オープン ソース ライセンス条項の遵守を確実にすると同時に、企業が自身の知的財産およびサードパーティ サプライヤの知的財産を意図しない漏洩やその他の結果から保護するのにも役立ちます。」

Ibrahim Haddad – Vice President of R&D and Head of the Open Source Group at Samsung Research America
Ibrahim Haddad – Samsung Research America 社 R&D 担当バイスプレジテント兼オープン ソース グループ長

There are several benefits companies can experience from maintaining an open source compliance program:
オープン ソース コンプライアンス プログラムを維持することにより、企業は次のようなメリットを得ることができます。

・Gain a technical advantage.
・技術的優位性の確保。

Since compliant software portfolios are easier to service, test, upgrade, and maintain.
これは、準拠ソフトウェアのポートフォリオを容易に提供、テスト、アップグレード、維持できるために実現されます。
#翻訳 Since はなぜなら、compliant software portfolios は(オープンソースライセンスに) 準拠したソフトウェアポートフォリオは、できるからです。　この行は前の gain a technical advantage の補足をしている

・Identify crucial pieces of open source code.
・オープン ソース コードの重要部分の特定。

You’ll discover what code is in use across multiple products and parts of your organization, and/or are highly strategic and beneficial to your open source strategy.
複数の製品や組織の部署にまたがって使用されているコードや、オープン ソース戦略にとって特に重要で有益なコードを把握できます。

・Demonstrate the costs and risks associated with using open source components.
・オープン ソース コンポーネントの使用に関するコストとリスクの実証。

This is easier to see when code goes through multiple rounds of review.
コードのレビューを複数回にわたって行うと、より容易に把握できます。

・Build community trust.
・コミュニティの信頼の構築。

In the event of a compliance challenge, such a program can demonstrate an ongoing pattern of acting in good faith.
コンプライアンスに関する問題が生じた場合、このようなプログラムにより、継続して誠意をもって行動する姿勢を示すことができます。

・Prepare for a possible acquisition, sale, or new product or service release.
・起こりうる買収、売却、あるいは新製品/サービスのリリースなどへの備え。

This is a less common ways benefit, but compliance assurance is a mandatory practice before the completion of such transactions.
これは、あまり一般的ではないメリットですが、このような取引を完了させるうえで、コンプライアンス保証は必須です。

・Build credibility in the supply chain.
・サプライ チェーン内の信頼関係の構築。

You can improve compliance across your software supply chain, dealing with OEMs and downstream vendors.
OEM や下流ベンダーとのやり取りを通じて、ソフトウェア サプライ チェーン全体のコンプライアンスを強化できます。

--------------------------------

Section 2
セクション 2

Compliance roles and responsibilities
コンプライアンスにおける役割と責任

Within your open source program you’ll want to create a designated open source compliance team that’s tasked with ensuring open source compliance.
オープン ソース プログラムでは、オープン ソース コンプライアンスの確保を目的とする専任のオープン ソース コンプライアンス チームを作ります。

The core team, often called the auditing team or the Open Source Review Board (OSRB), consists of representatives from engineering and product teams, one or more legal counsel, and the Compliance Officer (who is typically the open source program manager).
中核となるチームは、監査チームまたはオープン ソース レビュー ボード (OSRB: Open Source Review Board) と呼ばれ、エンジニアリング チームと製品チームの担当者、1 人以上の法務専門家、およびコンプライアンス オフィサー (通常、オープン ソース プログラム マネージャー) で構成されます。
＃用語　担当者→代表者

Other individuals across multiple departments also contribute on an ongoing basis to your open source compliance efforts: documentation, supply chain, corporate development, IT, localization and the Open Source Executive Committee (OSEC) which oversees the overall open source strategy.
ドキュメント製作、サプライ チェーン、経営企画、IT、ローカライゼーション、オープン ソース戦略全体を監督するオープン ソース執行委員会 (OSEC: Open Source Executive Committee) など、他のさまざまな部門の人々も、拡張チームのメンバーとしてオープン ソース コンプライアンスの取り組みに継続的に貢献しています。
＃翻訳　貢献しています→ 貢献します　ここはcontributes なので

But unlike the core team, members of the extended team are only working on compliance on a part-time basis, based on tasks they receive from the OSRB.
ただし、中核チームと異なり、拡張チームのメンバーは、OSRB から依頼された作業に基づいてパートタイム ベースでコンプライアンスに取り組むだけです。

The OSRB is in charge of creating an open source compliance strategy and a set of processes that determine how a company will implement these rules on a daily basis.
OSRB は、オープン ソース コンプライアンス戦略を策定し、企業が日常的に規則をどのように実施するかを決定する一連のプロセスを作成する責任を担っています。

The strategy establishes what must be done to ensure compliance and offers a governing set of principles for how employees interact with open source software.
この戦略では、コンプライアンス確保のために何をすべきかを決定し、従業員がオープン ソース ソフトウェアとどのように向き合えばよいかについて一連の統治原則を提供します。

It includes a formal process for the approval, acquisition, and use of open source, and a method for releasing software that contains open source or that’s licensed under an open source license.
これには、オープン ソースの承認、取得、使用のための正式なプロセス、およびオープン ソースを含むソフトウェアまたはオープン ソース ライセンスでライセンスされたソフトウェアのリリース方法が含まれます。
＃翻訳　method for releasing software that contains open source or that’s licensed under an open source license.
は オープンソースライセンスの下で許可されたものかオープンソースを含むソフトウェアをリリースする方法

--------------------------------

Section 3
セクション 3

A simple policy for using open source code
オープン ソース コードのシンプルな利用ポリシー

The usage policy is an essential component of any compliance program.
利用ポリシーは、すべてのコンプライアンス プログラムにとって不可欠なコンポーネントです。
＃翻訳　コンポーネント、ここでは一部分ということなのであえてカタカナでなくても良い

This set of rules is included in your open source strategy document (you have one, right?) and made available to everyone for easy reference.
この一連の規則は、オープン ソース戦略文書 (既にお持ちのはずです) に含まれ、誰でも入手して簡単に参照できるようになっています。
＃翻訳 set of rule は「これらの」でも良いのではないか、本質は後半にある

The usage policy is an essential component of any compliance program.
利用ポリシーは、すべてのコンプライアンス プログラムにとって不可欠なコンポーネントです。

This set of rules is included in your open source strategy document (you have one, right?) and made available to everyone for easy reference.
この一連の規則は、オープン ソース戦略文書 (既にお持ちのはずです) に含まれ、誰でも入手して簡単に参照できるようになっています。

The usage policy ensures that any software (proprietary, third-party, or open source) that makes its way into the product base has been audited, reviewed, and approved.
利用ポリシーは、製品を支えるすべてのソフトウェア (プロプライエタリ、サードパーティ製、オープン ソースを問わず) の監査、レビュー、承認が完了していることを保証するものです。
＃翻訳　ensure の部分は、監査、レビュー、承認を行うやり方（way)に従うように推進する、ということで、意味がちょっと違うのではないか？

It also ensures that your company has a plan to fulfill the license obligations resulting from using the various software components, before your products make it to customers.
また、さまざまなソフトウェア コンポーネントを使用することで生じたライセンス義務を履行するための計画を、製品が顧客の元に届く前に立ててあることを保証します。
＃翻訳　ensure は保証ではなく、組織の中で計画的にライセンス義務を履行することを強化する、ということでは？

There is no need to make a lengthy or complicated document.
長い文書や複雑な文書を作成する必要はありません。
＃翻訳　この理容ポリシーはを先頭につけた方が良い

A good open source usage policy includes six simple rules:
適切なオープン ソース利用ポリシーには、次の 6 つの簡単な規則が含まれます。

・Engineers must receive approval from the OSRB before integrating any open source code in a product.
・技術者は、オープン ソース コードを製品に統合する前に OSRB から承認を得る必要があります。

・Software received from third parties must be audited to identify any open source code included, which ensures license obligations can be fulfilled before a product ships.
・サードパーティから受け取ったソフトウェアは、監査を受けて、含まれているオープン ソース コードを特定する必要があります。これにより、製品出荷前にライセンス義務を確実に履行することができます。

・All software must be audited and reviewed, including all proprietary software components.
・すべてのソフトウェアは、すべてのプロプライエタリ ソフトウェア コンポーネントも含めて、監査およびレビューを受ける必要があります。

・Products must fulfill open source licensing obligations prior to customer receipt.
・製品は、顧客が受け取る前にオープン ソース ライセンス義務を履行する必要があります。

・Approval for using a given open source component in one product is not approval for another deployment, even if the open source component is the same.
・ある製品で特定のオープン ソース コンポーネントの使用が承認されても、その同じオープン ソース コンポーネントを別の展開で使用することが承認されたことにはなりません。

・All changed components must go through the approval process.
・変更されたコンポーネントはすべて、承認プロセスを経る必要があります。

--------------------------------

Section 4
セクション 4

5-stage code review process
5 段階のコード レビュー プロセス

Once you have a policy in place, you must plan and create a process that makes it easy to apply the policy.
利用ポリシーを策定したら、そのポリシーを容易に適用できるプロセスを計画し、作成します。

Your job is to grease the wheels for developer use of open source and contribution to open source projects.
開発者がオープン ソースの利用とオープン ソース プロジェクトへの貢献を円滑に行えるようにする必要があります。

“If your code review process is overly burdensome, you’ll slow innovation or provide a good excuse for developers to circumvent the process completely.”
「コードのレビュー プロセスがあまりに面倒なものだと、イノベーションのスピードが落ちたり、開発者にプロセス全体を回避する格好の口実を与えることになります。」

Ibrahim Haddad – Vice President of R&D and Head of the Open Source Group at Samsung Research America
Ibrahim Haddad – Samsung Research America 社 R&D 担当バイスプレジテント兼オープン ソース グループ長

The process begins by scanning the source code of the software package in question, then moves on to identifying and resolving any discovered issues, performing legal and architectural reviews, and making a decision regarding the usage approval.
プロセスではまず、対象となっているソフトウェア パッケージのソース コードをスキャンします。次に、発見された問題を特定および解決し、法的レビューとアーキテクチャ レビューを行ったのち、利用承認に関する決定を行います。

The diagram, below, illustrates a simplistic view of a compliance usage process.
下の図は、コンプライアンス利用プロセスを単純化して図示したものです。

In reality, the process is much more iterative in nature.
実際には、プロセスはその性質上、はるかに双方向的です。

Keep in mind that these phases are for illustration purposes and may need to be modified depending on your company’s own needs and open source program configuration.
以下の各段階は説明を目的としており、企業のニーズやオープン ソース プログラムの構成に応じて変更が必要な場合があることに注意してください。
＃翻訳　「ニーズ」は必要性か？　

Let’s walk through each stage in the process.
プロセスの各段階を順を追って説明しましょう。

----------------

Stage 1: Source Code Scan
第 1 段階:  ソース コードのスキャン

In the source code scanning phase, all the source code is scanned using a specialized software tools (there are many commercial vendors that offer such tools in addition to a couple open source alternatives).
ソース コードのスキャン段階では、専門のソフトウェア ツールを使用して、すべてのソース コードがスキャンされます (このようなツールは、いくつかのオープン ソース ツールの他に、数多くの商用ベンダーから提供されています)。

This phase typically kicks off when an engineer submits an online usage form.
この段階は、通常、技術者がオンラインの利用フォームを提出することで開始されます 

(See the sample usage form and rules for using it, below.)
(以下のサンプルの利用フォームと利用規則を参照)。

The form includes all the information about the open source component in question, and specifies the location of the source code in the source code repository system.
このフォームには、対象となっているオープン ソース コンポーネントに関するすべての情報を含め、ソース コード リポジトリ システム内のソース コードの場所を指定します。

The form submission automatically creates a compliance ticket in a system such as JIRA or Bugzilla and a source code scanning request will be sent to the designated auditing staff.
フォームを提出すると、JIRA、Bugzilla などのシステムにコンプライアンス チケットが自動的に作成され、指定された監査スタッフにソース コード スキャン要求が送られます。
＃翻訳　designated は指定されたではなく、決められた

Periodic full platform scans should also take place every few weeks to ensure that no open source software component has been integrated into the platform without a corresponding form.
対応する利用フォームの提出なしにオープン ソース ソフトウェア コンポーネントがプラットフォームに統合されることがないようにするため、プラットフォームの定期的なフル スキャンも数週間ごとに行う必要があります。
#翻訳　プラットフォームは何を示しているか？　OSSを組み込むソフトウェア製品全体のことを指しているように思うが説明がないのでわからない
＃翻訳　定期的なフル　スキャンとなっているが、プラットフォーム全体のスキャンであるべきではないか？

If any was found, then a JIRA ticket is automatically issued and assigned to the auditing staff.
何らかの問題が見つかった場合は、JIRA チケットが自動的に発行され、監査スタッフに割り当てられます。

Some of the factors that can trigger a source code scan include:
ソース コードのスキャンが開始される要因には、次のようなものがあります。

・An incoming usage form, usually filled out by engineering staff.
・利用フォーム (通常はエンジニアリング スタッフが入力) の受信。

・A periodically scheduled full platform scan.
・定期的にスケジュールされているプラットフォームのフル スキャン。
#翻訳　プラットフォーム全体のスキャン
#注釈　ここでプラットフォームとは製品となるソフトウェア全体のことを指して居ます

Such scans are very useful for uncovering open source code that snuck into your software platform without a usage form.
このようなスキャンは、利用フォームが提出されないままソフトウェア プラットフォームに密かに入り込んだオープン ソース コードを発見するのに非常に役立ちます。

・Changes in a previously approved software component.
・以前に承認されたソフトウェア コンポーネントの変更。

In many cases, engineers start evaluating and testing with a certain version of an OSS component, and later adopt that component when a new version is available.
多くの場合、技術者はまず、OSS コンポーネントの特定のバージョンを評価およびテストし、その後、新しいバージョンが利用可能になると、そのコンポーネントを採用します。

・Source code is received from a third-party software provider who may or may not have disclosed open source.
・サードパーティ ソフトウェア プロバイダからのソース コードの入手。プロバイダがオープン ソースを公開しているかどうかは問いません。
#翻訳　サードパーティからソースコードが提供された場合、それがオープンソースとして公開しているかどうかは問わない。

・Source code is downloaded from the web with an unknown author and/or license, which may or may not have incorporated open source code.
・作成者やライセンスが不明なソース コードの Web からのダウンロード。ソース コードにオープン ソース コードが組み込まれているかどうかは問いません。
#翻訳 Webからのダウンロードが行なわれた場合、

・A new proprietary software component enters the build system where engineering may or may not have borrowed open source code and used it in a proprietary software component.
・新しいプロプライエタリ ソフトウェア コンポーネントのビルド システムへの組み込み。エンジニアリング担当者がオープン ソース コードを借用し、それをプロプライエタリ ソフトウェア コンポーネントで使用したかどうかは問いません。
#翻訳　ビルドシステムへ組む込まれた場合、

After the code is scanned, the scanning tool produces a report that provides information on:
コードのスキャンが終了すると、スキャン ツールは、以下の情報を提供するレポートを生成します。

・Known software components in use, also known as the software Bill of Materials (BoM)
・使用されている既知のソフトウェア コンポーネント。ソフトウェア部品表 (BOM) とも呼ばれます。

・Licenses in effect, license texts, and summary of obligations
・有効なライセンス、ライセンス テキスト、義務の概要

・License conflicts to be verified by legal
・法務専門家による検証が必要なライセンス抵触
#翻訳　法務専門家による確認が必要なライセンスとの矛盾点

・File inventory
・ファイル目録

・Identified files
・識別されたファイル

・Dependencies
・依存関係

・Code matches
・コードの一致

・Files pending identification
・識別保留中のファイル

・Source code matches pending identification
・保留中の識別と一致するソース コード

Note on Downloaded Open Source Packages
ダウンロードしたオープン ソース パッケージに関する注意

It is vital to archive open source packages downloaded from the web in their original form.
Web からダウンロードしたオープン ソース パッケージは、元の形のまま保管しておくことが重要です。

These packages will be used in a later stage (prior to distribution) to verify and track any changes introduced to the source code by computing the difference between the original package and the modified package.
このパッケージは、後の段階で (配布前) 元のパッケージと変更後のパッケージの間の差分を計算することにより、ソース コードに加えられた変更を検証および追跡するために使用します。
#翻訳　この元パッケージは、（配付前の）後の段階で元のパッケージと変更後のパッケージの差分を調べることによって、ソースコードに加えられた変更を追跡し、検証するために使います。

If a third-party software provider uses open source, the product team integrating that code into the product must submit an open source usage form describing the open source to be used.
サードパーティ ソフトウェア プロバイダがオープン ソースを使用している場合、そのコードを製品に統合する製品チームは、使用されているオープン ソースについて記述したオープン ソース利用申請フォームを提出する必要があります。

If the third-party software provider only provides binaries, not source code, then the product team and/or the software supplier manager who manages the relationship with the third-party software provider must obtain a confirmation (for instance, a scan report) that there is no open source in the provided software.
サードパーティ ソフトウェア プロバイダがソース コードを提供せず、バイナリしか提供しない場合は、製品チーム、またはサードパーティ ソフトウェア プロバイダとの関係を管理するソフトウェア サプライヤ マネージャーは、提供されたソフトウェアにオープン ソースが含まれていないという確証 (たとえば、スキャン レポート) を得る必要があります。

----------------

Stage 2: Identification and Resolution
第 2 段階:  特定および解決

In the identification and resolution phase, the auditing team inspects and resolves each file or snippet flagged by the scanning tool.
特定および解決段階では、監査チームが、スキャン ツールによってフラグが付けられたファイルまたはスニペットを検査し、解決します。

For example, the scanning tool’s report can flag issues such as conflicting and incompatible licenses.
たとえば、スキャン ツールのレポートは、矛盾するライセンスや互換性のないライセンスなどの問題にフラグを付けます。
#翻訳　ライセンスのincompatible の翻訳はLFとしてどうするか、決める必要がある　互換性とするかFSFが翻訳する「両立」とするか？

If there are no issues, then the compliance office will move the compliance ticket forward to the legal review phase.
問題がない場合、コンプライアンス オフィサーはコンプライアンス チケットを法的レビュー段階へ進めます。
＃翻訳　コンプライアンスオフィスかオフィサーか？後半ではofficerと明確に書いているのでここはオフィスか？あるいは原文が間違えてるか？

If there are issues to be resolved, then the compliance officer creates subtasks within the compliance tickets and assigns them to the appropriate engineers to be resolved.
解決すべき問題がある場合、コンプライアンス オフィサーはコンプライアンス チケット内にサブタスクを作成して、適切なエンジニアリング担当者に割り当てて解決させます。

In some cases, a code rework is needed; in other cases it may simply be a matter of clarification.
コーディングし直す必要がある場合も、確認だけで済む場合もあります。
＃翻訳　コーディングは仕様に従ってコードを作成するイメージでreworkには合わないのではないか、ここでは「コードを直す必要がある」の方が良いです

The sub-tasks should include a description of the issue, a proposed solution to be implemented by engineering, and a specific timeline for completion.
サブタスクには、問題の説明、エンジニアリング担当者が実施すべき解決策の提案、完了までのタイムラインを含める必要があります。

The compliance officer may simply close the subtasks once all issues are resolved and pass the ticket along for legal review.
すべての問題が解決したら、コンプライアンス オフィサーはサブタスクを閉じ、チケットを法的レビューに渡すことができます。

Or they might first order a re-scan of the source code and generate a new scan report confirming that earlier issues do not exist anymore.
あるいは、まずソース コードの再スキャンを指示し、新しいスキャン レポートを生成してから、以前の問題がなくなったことを確認するという方法もあります。

Once they’re satisfied that all issues are resolved, the compliance officer forwards the compliance ticket to a representative from the legal department for review and approval.
すべての問題が解決されたと納得できたら、コンプライアンス オフィサーは、レビューと承認のためにコンプライアンス チケットを法務部門の担当者に送ります。

In preparation for legal review, you should attach all licensing information related to the open source software to the compliance ticket, such as COPYING, README, LICENSE files, etc.
法的レビューに向けた準備として、オープン ソース ソフトウェアに関連するすべてのライセンス情報 (COPYING、README、LICENSE ファイルなど) をコンプライアンス チケットに添付する必要があります。
＃翻訳　ここではthe open source software は検査しているソフトウェア全体に含まれるオープンソースのことであり、世界的中にある全てのOSSのことではない
----------------

Stage 3: Legal Review
第 3 段階:  法的レビュー

In the legal review phase, the legal counsel (typically a member of the open source review board, or OSRB) reviews reports generated by the scanning tool, the license information of the software component, and any comments left in the compliance ticket by engineers and members of the auditing team.
法的レビュー段階では、法務専門家 (通常、オープン ソース レビュー ボード (OSRB) のメンバー) がスキャン ツールによって生成されたレポート、ソフトウェア コンポーネントのライセンス情報、エンジニアリング担当者や監査チームのメンバーがコンプライアンス チケットに残したコメントなどのレビューを行います。

When a compliance ticket reaches the legal review phase, it already contains:
法的レビュー段階に到達したコンプライアンス チケットには、既に以下が含まれています。

・A source code scan report and confirmation that all the issues identified in the scanning phase have been resolved.
・ソース コード スキャン レポート、およびスキャン段階で特定されたすべての問題が解決済みであることの確認。

・Copies of the license information attached to the ticket: typically, the compliance officer attaches the README, COPYING, and AUTHORS files available in the source code packages to the compliance ticket.
・チケットに添付されたライセンス情報のコピー。通常、コンプライアンス オフィサーは、ソース コード パッケージで入手できる README、COPYING、および AUTHORS ファイルをコンプライアンス チケットに添付します。

Other than the license information, which for OSS components is usually available in a COPYING or a LICENSE file, you need to also capture copyright and attribution notices as well.
ライセンス情報 (OSS コンポーネントでは、通常、COPYING ファイルまたは LICENSE ファイルで確認できます) の他に、著作権や帰属告知についても取得する必要があります。

This information will provide appropriate attributions in your product documentation.
この情報は、製品ドキュメントに適切な帰属を提供します。
#意訳　appropriate attributionは直訳では適切な属性だが、実際には製品マニュアルの中にOSSを使って居ることによって実施すべき適切な告知や表示と行ったやるべきことを提供する、という意味です。

・Feedback from the compliance officer regarding the compliance ticket (concerns, additional questions, etc.).
・コンプライアンス チケットに関するコンプライアンス オフィサーからのフィードバック (懸念事項、新たな疑問点など)。

・Feedback from the engineering representative on the auditing team or from the engineer (package owner) who follows/maintains this package internally.
・監査チームに対するエンジニアリング担当者からのフィードバック、またはこのパッケージを内部で追跡/維持する技術者 (パッケージ所有者) からのフィードバック。

The goal of this phase is to produce a legal opinion of compliance, and a decision on the incoming and outgoing license(s) for the software component in question.
この段階の目標は、コンプライアンスに関する法務専門家の見解をまとめ、対象となっているソフトウェア コンポーネントでの使用ライセンスと被使用ライセンスについて決定することです。
＃意訳 outgoing license は使用されるという意味で被使用として居るが、漢字にすることで逆に難しくなってしまって居る。公開ライセンスの方がよいのではないか？

The incoming and outgoing licenses are in the plural form because in some cases, a software component can include source code available under different licenses.
ソフトウェア コンポーネントには複数のライセンスの下で利用できるソース コードが含まれている場合があるため、使用ライセンスと被使用ライセンスは、複数ある場合があります。
＃意訳 outgoing 公開が良いのではないか

There are three possible outcomes at this stage:
この段階では、次の 3 つの結果が得られる可能性があります。

No issues
問題なし

If there are no issues with the licensing, the legal counsel would then decide on the incoming and outgoing licenses of the software component and forward the compliance ticket one step further in the process into the compliance architectural phase.
ライセンスに関して問題がない場合、法務専門家は、ソフトウェア コンポーネントの使用ライセンスと被使用ライセンスを決定し、コンプライアンス チケットのプロセスをコンプライアンスのアーキテクチャ段階へと一歩進めます。
＃意訳　outgoing 公開

The incoming license is the license under which you received the software package.
使用ライセンスは、受け取ったソフトウェア パッケージに対するライセンスです。

The outgoing license is the license under which you are licensing the software package.
被使用ライセンスは、自身がライセンスしているソフトウェア パッケージに対するライセンスです。
＃意訳　outgoing は公開するソフトウェアパッケージ対するライセンスです

In some cases, when the incoming license is a permissive license that allows relicensing (e.g., BSD), companies will relicense that software under their own proprietary license.
場合によっては、使用ライセンスが再ライセンス (BSD など) を許可するパーミッシブ ライセンスであることがあり、その場合、企業は、自身のプロプライエタリ ライセンスの下でソフトウェアを再ライセンスします。

A more complex example would be a software component that includes proprietary source code, source code licensed under License-A, source code that is available under License-B, and source code available under License-C.
さらに複雑な例として、ソフトウェア コンポーネントにプロプライエタリ ソース コード、ライセンス A でライセンスされたソース コード、ライセンス B の下で利用できるソース コード、ライセンス C の下で利用できるソース コードが含まれる場合を考えます。

During legal review, the legal counsel will need to decide on the incoming and outgoing license(s):
法的レビュー時、法務専門家は、使用ライセンスと被使用ライセンスを次のように決定する必要があります。
＃意訳　outgoing 公開

Incoming licenses= Proprietary License + License A + License B + License C
使用ライセンス = プロプライエタリ ライセンス + ライセンス A + ライセンス B + ライセンス C

Outgoing license(s) = ?
被使用ライセンス = ?
＃意訳　outgoing 公開

Issues
問題あり

If a licensing issue is found, such as mixed source code with incompatible licenses, the legal counsel will flag these issues and reassign the compliance ticket in JIRA to engineering to rework the code.
互換性のないライセンスを持つソース コードの混在など、ライセンスに関する問題が見つかった場合、法務専門家は、それらの問題にフラグを付け、JIRA のコンプライアンス チケットを再度エンジニアリング担当者に割り当てて、コードを修正させます。

For example, legal review may uncover that closely held intellectual property has been combined with an open source code package.
たとえば、法的レビューにより、非公開の知的財産がオープン ソース コード パッケージと組み合わされていることが明らかになったとします。

Legal counsel will flag this and re-assign the compliance ticket to engineering to remove the proprietary source code from the open source component.
法務専門家は、これにフラグを付け、コンプライアンス チケットを再度エンジニアリング担当者に割り当てて、オープン ソース コンポーネントからプロプライエタリ ソース コードを削除させます。

In the event that engineering insists on keeping the proprietary source code in the open source component, the open source executive committee (OSEC) will have to release the proprietary source code under an open source license.
エンジニアリング担当者がオープン ソース コンポーネントにプロプライエタリ ソース コードを保持することを主張する場合、オープン ソース執行委員会 (OSEC) は、オープン ソース ライセンスの下でプロプライエタリ ソース コードをリリースする必要があります。
＃翻訳　OSECは執行委員会で良いか？他のドキュメントでも出てくるはず

Unclear
不明

In some cases, if the licensing information is not clear or if it is not available, the legal counsel or engineering staff members contacts the project maintainer or the open source developer to clarify the ambiguities and to confirm under which license that specific software component is licensed.
ライセンス情報が不明確だったり、利用できない場合は、法務専門家またはエンジニアリング スタッフ メンバーがプロジェクト管理者またはオープン ソース開発者に問い合わせて、曖昧さを解決し、その特定のソフトウェア コンポーネントがどのライセンスの下にライセンスされているかを確認します。

----------------

Stage 4: Architecture Review
第 4 段階:  アーキテクチャ レビュー

In the architecture review, the compliance officer and an engineering representative on the auditing team or open source review board perform an analysis of the interaction between the open source, proprietary, and third-party code.
アーキテクチャ レビューでは、監査チームまたはオープン ソース レビュー ボードのコンプライアンス オフィサーとエンジニアリング担当者が、オープン ソース、プロプライエタリ、およびサードパーティのコード間の相互作用を分析します。
#翻訳 interaction を相互作用と翻訳して居るが、この場合は３つの関係のこと（OSSライセンスがプロプラや３rdパーティソフトとどう作用するか）の分析のことなので、相互関係の方がよい

This is accomplished by examining an architectural diagram (see an example, below) that identifies:
これは、以下を示すアーキテクチャ概略図 (以下の例を参照) を調べることで実施されます。

・Open source components (used “as is” or modified)
・オープン ソース コンポーネント (そのまま使用、または変更)

・Proprietary components
・プロプライエタリ コンポーネント

・Components originating from third-party software providers
・サードパーティ ソフトウェア プロバイダ起源のコンポーネント

・Component dependencies
・コンポーネントの依存関係

・Communication protocols
・通信プロトコル

・Other open source packages that the specific software component interacts with or depends on, especially if it is governed by a different open source license.
・特に、特定のソフトウェア コンポーネントが別のオープン ソース ライセンスによって管理されている場合、そのコンポーネントがやり取りするまたは依存する、その他のオープン ソース パッケージ。

The result of the architecture review is an analysis of the licensing obligations that may extend from open source to proprietary or third-party software components (and across open source components as well).
アーキテクチャ レビューの結果として、ライセンス義務に関する分析が得られます。ライセンス義務は、オープン ソースからプロプライエタリまたはサードパーティ ソフトウェア コンポーネントに及ぶ場合があり、また、複数のオープン ソース コンポーネントにまたがって及ぶ場合もあります。

If the compliance officer discovers any issues, such as a proprietary software component linking to a GPL licensed component, the compliance officer forwards the compliance ticket to engineering for resolution.
コンプライアンス オフィサーが問題 (たとえば、GPL ライセンスされたコンポーネントにリンクしているプロプライエタリ ソフトウェア コンポーネント) を発見した場合、コンプライアンス オフィサーは解決のためにコンプライアンス チケットをエンジニアリング担当者に送ります。

If there are no issues, then the compliance officer moves the ticket to the final stage in the approval process.
問題がない場合は、コンプライアンス オフィサーはチケットを承認プロセスの最終段階へ送ります。

----------------

Stage 5: Final Review
第 5 段階:  最終レビュー

The final review is usually a face-to-face meeting of the auditing team or open source review board (OSRB) during which the team approves or rejects the usage of the software component.
最終レビューは、通常、監査チームまたはオープン ソース レビュー ボード (OSRB) の対面での会議で行われ、この会議で、チームはソフトウェア コンポーネントの使用を承認または却下します。

The team bases its decision on the complete compliance record of the software component, which includes the following:
チームの決定は、ソフトウェア コンポーネントの完全なコンプライアンス レコードに基づいて行われますが、これには以下が含まれます。

・A source code scan report generated by the scanning tool.
・スキャン ツールによって生成されたソース コード スキャン レポート。

・The list of discovered issues, information on how they were resolved, and who verified that these issues were successfully resolved.
・発見された問題のリスト、どのように解決されたかの情報、およびこれらの問題が適切に解決されたことを誰が検証したか。
#翻訳　how と who で文が構成されているので、どのように.. および　誰がこれらの問題を適切に解決し、検証したか。が良い

・Architectural diagrams and information on how this software component interacts with other software components.
・アーキテクチャ概略図、および対象ソフトウェア コンポーネントが他のソフトウェア コンポーネントとどのようにやり取りするかの情報。
#翻訳　以前に出てきたInteract は関係、としたので、ここでもやり取りではなく関係
が望ましい。(OSSライセンスとその他のソフトウェアとの関係）

・Legal opinion on compliance, and decision on incoming and outgoing licenses.
・コンプライアンスに関する法務専門家の意見、および使用ライセンスと被使用ライセンスに関する決定。
#翻訳 outgoing 公開

・Dynamic and static linkage analysis, if applicable in an embedded environment (C/C++).
・組み込み環境 (C/C++) で該当する場合、動的および静的リンケージ分析。
#翻訳　で該当する場合、は重すぎるので、組み込み環境(C/C++)の場合、動的、静的リンク関係の分析

In most cases, if a software component reaches the final review, it will be approved unless a condition has presented itself (such as the software component is no longer in use).
ほとんどの場合、最終レビューに到達したソフトウェア コンポーネントは、何らかの条件が見つからない限り (ソフトウェア コンポーネントが使用されなくなった場合など)、承認されます。

Once approved, the compliance officer will prepare the list of license obligations for the approved software component and pass it to appropriate departments for fulfillment.
承認されると、コンプライアンス オフィサーは、承認されたソフトウェア コンポーネントのライセンス義務のリストを作成して適切な部門に渡し、義務を履行させます。

This can include:
これには、以下が含まれます。

・Updating the software inventory to reflect that the specific OSS software component version x is approved for usage in product y, version z.
・特定の OSS ソフトウェア コンポーネントのバージョン x を製品 y のバージョン z で使用することが承認されたことを反映するように、ソフトウェア目録を更新します。
＃翻訳 software inventory はソフトウェア目録と訳しているが、これはLFとしての共通の用語集にした方がよいのでは？　過去のドキュメントをサーチして同じ用語をどう訳したかを調べた方がよい

・Issuing a ticket to the documentation team to update end user notices in the product documentation, to reflect that open source is being used in the product or service.
・製品またはサービスでオープン ソースが使用されていることを反映するように製品ドキュメントのエンド ユーザー向け通知を更新するために、チケットをドキュメント製作チームに発行します。

・Triggering the distribution process before the product ships.
・製品出荷前に配布プロセスを開始します。

Steps accomplished after the OSRB approval
OSRB 承認後に実施される手順

The compliance officer tracks all open tickets and ensures their completion by the time the product ships or service launches.
コンプライアンス オフィサーは、すべてのオープンなチケットを追跡し、製品出荷時またはサービス開始時までに完了するようにします。

For a more detailed usage process and possible scenarios, see our ebook Open Source Compliance in the Enterprise.
詳細な利用プロセスと想定されるシナリオについては、電子書籍「企業におけるオープン ソース コンプライアンス」を参照してください。
#翻訳　ebook Open Source Compliance in the Enterprise の日本語版があるならばこれで良いが、無いなら英語のままが良い
--------------------------------
＞＞＞＞
Section 5
セクション 5

What to do after v1.0
バージョン 1.0 後のプロセス
#翻訳　「プロセス」は原文にない、ここはバージョン1.0 の後で実施すべきこと

Initial compliance, also called baseline compliance, happens when development starts, and continues until the release of the first version of the product.
最初のコンプライアンス (ベースライン コンプライアンスとも呼ばれる) は、開発が開始された時点で発生し、製品の最初のバージョンのリリースまで継続します。
#翻訳 initial compliance は後述のincremental compliance の対比となっているので最初のではなく、初期コンプライアンスとすべき

The compliance team identifies all open source code included in the software baseline, and drives all of the source components through the five-stage approval process outlined above.
コンプライアンス チームは、ソフトウェア ベースラインに含まれるすべてのオープン ソース コードを特定し、すべてのソース コンポーネントに対して上述の 5 段階の承認プロセスを完了させます。
#意訳 software baseline は上記の base line compliance のソフトウェアをさしており、baseline software のことなので、ベースラインソフトウェアで良い
 
“It’s important to remember that open source complia
nce doesn’t stop with version 1.0.”
「オープン ソース コンプライアンスはバージョン 1.0 で終了ではないことをしっかりと覚えておいてください。」

Ibrahim Haddad – Vice President of R&D and Head of the Open Source Group at Samsung Research America
Ibrahim Haddad – Samsung Research America 社 R&D 担当バイスプレジテント兼オープン ソース グループ長
#翻訳　タイトルは日本語に訳す必要あるか？

You will also need to develop an incremental compliance process to check in on the source code once the product ships.
製品出荷後は、ソース コードをチェックする増分コンプライアンス プロセスを開発する必要があります。
#意訳 incremental compliance は initial compliance の次にやることを示しているおり、増分ではなく、「追加」とするか、もしくは「インクリメンタル」とする。この用語は emacs にあるインクリメンタルサーチのように必要なものを必要な時に付加してサーチするような機能を意味している

This process starts when development begins on a new branch that includes additional features and/or bug fixes.
このプロセスは、追加機能やバグ修正などを含む新しいブランチに関する開発が始まったときに開始されます。

Incremental compliance is the process by which compliance is maintained when product features are added to the baseline version 1.0.
増分コンプライアンスは、製品の機能がベースライン バージョン 1.0 に追加されたときにコンプライアンスを維持するためのプロセスです。
#意訳　incremental はインクリメンタルか追加

Incremental Compliance
増分コンプライアンス
#意訳　Incremental は追加かインクリメンタル

Incremental compliance requires a comparatively smaller effort as opposed to the efforts involved in establishing baseline compliance.
増分コンプライアンスは、ベースライン コンプライアンスの確立に必要な労力と比べると、比較的手間がかかりません。
#意訳　Incremental は追加かインクリメンタル

But several challenges can arise.
しかし、いくつかの問題が生じる可能性があります。

You must correctly identify the source code that changed between version 1.0 and version 1.1, and verify compliance on the delta between the releases:
バージョン 1.0 とバージョン 1.1 の間で変更されたソース コードを正確に特定し、リリース間の次のような差分についてコンプライアンスを検証する必要があります。

・New software components may have been introduced.
・新しいソフトウェア コンポーネントが導入されている可能性があります。

・Existing software components may have been retired.
・既存のソフトウェア コンポーネントが廃止されている可能性があります。
#意訳　retired の翻訳として廃止とされているが、意訳として、「使用が中止されている」

・Existing software components may have been upgraded to a newer version.
・既存のソフトウェア コンポーネントが新しいバージョンにアップグレードされている可能性があります。

・The license on a software component may have changed between versions.
・ソフトウェア コンポーネントのライセンスがバージョン間で変更されている可能性があります。

・Existing software components may have code changes involving bug fixes or changes to functionality and architecture.
・既存のソフトウェア コンポーネントで、バグ修正や機能/アーキテクチャの変更に伴うコード変更が行われている可能性があります。

The obvious question is: How can we keep track of all of these changes?
当然の疑問として、このような変更のすべてを追跡し続けるにはどうすればいいでしょうか？

The answer is simple: a bill of material difference tool (BOM diff tool).
答えは簡単です。部品表比較ツール (BOM 比較ツール) の利用です。
#用語　BOMは部品表　で良いか？　用語集としてBOMを定義すべき

Given the BOM for product v1.1 and the BOM for v1.0, we compute the delta and the output of the tool is the following:
バージョン 1.1 の製品の BOM とバージョン 1.0 の製品の BOM がある場合、ツールを使用すると、差分を計算して以下を出力できます。
#意訳 compute はここでは「比較して」で良い

・Names of new software components added in v1.1
・バージョン 1.1 で追加された新しいソフトウェア コンポーネントの名前

・Names of updated software components
・更新されたソフトウェア コンポーネントの名前

・Names of retired software components
・廃止されたソフトウェア コンポーネントの名前
#意訳　retired は使用が中止された

With this information in hand, achieving incremental compliance becomes a relatively easy task:
この情報を入手できれば、増分コンプライアンスの実現は比較的容易な作業になります。
#意訳 増分コンプライアンスは インクリメンタルコンプライアンス

・Enter new software components into the five-phase usage approval process.
・新しいソフトウェア コンポーネントを 5 段階の利用承認プロセスに投入します。

・Compute a line-by-line diff of the source code in changed software components, and decide if you want to scan the source code again or rely on the previous scan.
・変更されたソフトウェア コンポーネントのソース コードの差分を 1 行ごとに計算し、ソース コードを再度スキャンするか、以前のスキャンを信頼するかを決定します。
#意訳 compute はここでは計算ではなく、比較

・Update the software registry by removing the software components that are not used anymore.
・使用されなくなったソフトウェア コンポーネントを削除して、ソフトウェア レジストリを更新します。

The diagram, below, provides an overview of the incremental compliance process.
下の図に、増分コンプライアンス プロセスの概要を示します。
#意訳 増分コンプライアンスは インクリメンタルコンプライアンス

The BOM file for each product release is stored on the build server.
各製品リリースの BOM ファイルはビルド サーバーに保存されます。

The BOM diff tool takes two BOM files as input, each corresponding to a different product release, and computes the delta to produce a list of changes as previously discussed.
BOM 比較ツールは、それぞれが異なる製品リリースに対応する 2 つの BOM ファイルを入力として使用して、差分を計算し、前述の変更リストを作成します。
#意訳 compute はここでは「比較して」で良い

At this point, the compliance officer will create new compliance tickets for all new software components in the release, update compliance tickets where source code has changed and possibly re-pass them through the process, and finally update the software registry to remove retired software components from the approved list.
この段階でコンプライアンス オフィサーは、当該リリースのすべての新しいソフトウェア コンポーネントに対して新しいコンプライアンス チケットを作成し、変更されたソース コードについてはコンプライアンス チケットを更新し、場合によってはプロセスを再度通過させ、最後に、ソフトウェア レジストリを更新することにより、廃止されたソフトウェア コンポーネントを承認リストから削除します。
#翻訳 Retierd は使用が中止された

Example of Incremental compliance process
増分コンプライアンス プロセスの例
#意訳 増分コンプライアンスは インクリメンタルコンプライアンス

Open source usage request form
オープン ソース利用申請フォーム

Completing the open source usage request form is an important step when developers bring open source software into your company, and should be taken very seriously.
オープン ソース利用申請フォームの記入は、開発者がオープン ソース ソフトウェアを企業に持ち込む際の重要なステップで、慎重に行う必要があります。

Developers fill out the online form requesting approval to use a given open source component.
開発者は、特定のオープン ソース コンポーネントを使用する承認を求めるオンライン フォームに入力します。

The form comprises several questions that will provide necessary information for the auditing team or open source review board, allowing it to approve or disapprove the usage of the proposed open source component.
このフォームはいくつかの質問で構成されており、監査チームまたはオープン ソース レビュー ボードは、これらの質問から得られる情報により、提案されたオープン ソース コンポーネントの使用を承認するかどうかを決定することができます。

The table, below, highlights the information requested in an open source usage request form.
次の表に、オープン ソース利用申請フォームで入力を求められる情報を示します。

Usually, these values are chosen from a pull-down menu to make the data entry efficient.
通常、これらの値はプルダウン メニューから選択できるため、データを効率よく入力できます。

There are several rules governing the OSRB usage form, for instance:
OSRB 利用フォームに関しては、次のようないくつかの規則があります。

・The form applies only to the usage of open source in a specific product and in a specific context.
・フォームは、特定の製品および特定のコンテキストでのオープン ソースの利用に限定して適用されます。

It is not a general approval of the open source component for all use cases in all products.
すべての製品のすべてのユースケースについて、オープン ソース コンポーネントの一般的な承認を申請するためのものではありません。

・The form is the basis of audit activity and provides information the review team needs to verify if the implementation is consistent with the usage plan expressed in the form, and with the audit and architectural review results.
・フォームは監査活動の基礎です。レビュー チームは、実装がフォームで示されている利用計画や監査およびアーキテクチャ レビューの結果と一致しているかどうかを検証するために、フォームによって提供される情報を必要とします。

・The form must be updated and re-submitted whenever the usage plans for that specific open source component changes.
・当該オープン ソース コンポーネントの利用計画が変更された場合は必ず、フォームを更新して再提出する必要があります。

・The auditing team or review board must approve the form before engineering integrates the open source into the product build.
・エンジニアリング担当者がオープン ソースを製品ビルドに統合する前に、監査チームまたはレビュー ボードがフォームを承認する必要があります。

・The open source executive committee must approve the usage of any open source package where licensing terms require granting a patent license or patent non-assertion.
・オープン ソース執行委員会は、ライセンス条項が特許ライセンスの付与または特許の非係争を要求しているすべてのオープン ソース パッケージについて、使用を承認する必要があります。

--------------------------------

Section 6
セクション 6

Sample open source usage request form
オープン ソース利用申請フォーム サンプル

--------------------------------

Section 7
セクション 7

Final words
終わりに

Open source compliance is an essential part of the software development process.
オープン ソース コンプライアンスは、ソフトウェアの開発プロセスに不可欠のものです。

If you use open source software in your product(s) and you do not have a solid compliance program, then you should consider this guide as a call to action.
製品でオープン ソース ソフトウェアを使用しているにも関わらず、強固なコンプライアンス プログラムがない場合は、ぜひこのガイドをきっかけとして行動を起こしてください。

At its core, open source compliance consists of a set of actions that control the intake and distribution of open source used in commercial products.
本質的に、オープン ソース コンプライアンスは、商品で使用されるオープン ソースの取り込みと配布を管理する一連の活動で構成されます。

The result of compliance due diligence is an identification of all open source used in the product (components and snippets) and a plan to meet the license obligations.
コンプライアンスのデュー デリジェンス (適正評価) の結果、製品で使用されるすべてのオープン ソース (コンポーネントおよびスニペット) が特定され、ライセンス義務の履行計画が策定されます。

For a detailed guide to open source compliance download our free ebook, Open Source Compliance in the Enterprise by Ibrahim Haddad.
オープン ソース コンプライアンスに関する詳細なガイドについては、無料の電子書籍「企業におけるオープン ソース コンプライアンス」(Ibrahim Haddad 著) をダウンロードしてください。

--------------------------------

Section 8
セクション 8

Architecture diagram template
アーキテクチャ概略図テンプレート

An architectural diagram, used in the architecture review phase of the open source review process, illustrates the interactions between the various software components in an example platform.
オープン ソース レビュー プロセスのアーキテクチャ レビュー段階で使用されるアーキテクチャ概略図に、プラットフォーム内のさまざまなソフトウェア コンポーネント間の相互作用を示します。

Here is an example architectural diagram that shows:
以下のアーキテクチャ概略図サンプルでは、次のものが示されています。

・Module dependencies
・モジュールの依存関係

・Proprietary components
・プロプライエタリ コンポーネント

・Open source components (modified versus as-is)
・オープン ソース コンポーネント (変更されたものと元のままのもの)

・Dynamic versus static linking
・動的リンクと静的リンク

・Kernel space versus user space
・カーネル空間とユーザー空間

・Shared header files
・共有ヘッダー ファイル

・Communication protocols
・通信プロトコル

・Other open source components that the software component in question interacts or depends on, especially if it is governed by a different open source license
・特に、対象となっているソフトウェア コンポーネントが別のオープン ソース ライセンスによって管理されている場合、そのコンポーネントがやり取りするまたは依存する、その他のオープン ソース コンポーネント

This template for an architectural diagram applies to an embedded environment that relies on C or C++.
このアーキテクチャ概略図のテンプレートは、C または C++ に依存する組み込み環境に適用されます。

These resources were created in partnership with the TODO (Talk Openly, Develop Openly) Group – the professional open source networking group at The Linux Foundation.
これらのリソースは、Linux Foundation のプロフェッショナルなオープン ソース ネットワーク グループである TODO (Talk Openly, Develop Openly) グループと協力して作成されました。

A special thanks goes out to the open source program managers who contributed their time and knowledge to making these comprehensive guides.
これらの包括的なガイドの作成に時間と知識を提供してくださったオープン ソース プログラム マネージャーの皆様に感謝いたします。

Participating companies include Autodesk, Comcast, Dropbox, Facebook, Google, Intel, Microsoft, Netflix, Oath (Yahoo + AOL), Red Hat, Salesforce, Samsung and VMware.
参加企業は次のとおりです。Autodesk、Comcast、Dropbox、Facebook、Google、Intel、Microsoft、Netflix、Oath (Yahoo + AOL)、Red Hat、Salesforce、Samsung、VMware。

To learn more, visit: todogroup.org
詳細については、次のサイトにアクセスしてください。todogroup.org

This work is licensed under a Creative Commons Attribution ShareAlike 4.0 International License.
この文書は、クリエイティブ・コモンズ表示 - 継承 4.0 国際ライセンスの下でライセンスされています。

Sign up to get updates!
登録して最新情報を入手してください。

Be the first to know when we add more open source guides and other content like this.
オープン ソース ガイドや他の同様のコンテンツの追加情報をいち早くお届けします。

First Name
名

Last Name
姓

Business Email
勤務先電子メール

SUBSCRIBE NOW »
今すぐ購読する »

The contents of this form are subject to The Linux Foundation's Privacy Policy.
このフォームの内容は、Linux Foundation のプライバシー ポリシーの対象となります。

Copyright © 2018 The Linux Foundation®.
Copyright © 2018 The Linux Foundation®.

All rights reserved.
All rights reserved.
