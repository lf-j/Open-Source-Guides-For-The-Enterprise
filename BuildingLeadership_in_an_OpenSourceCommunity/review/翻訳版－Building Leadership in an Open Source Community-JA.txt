
The Linux Foundation

オープンソース コミュニティでリーダーシップを構築する

オープンソース コミュニティに溶け込むには時間と労力がかかり、製品開発への新しいアプローチの採用が必要となります。従来の、プロプライエタリな製品の開発が機密性と管理の階層を必要とする領域で、オープンソース開発は開示性を必要とし、意見の一致を重要視します。役職や地位ではなく、コードの貢献こそが、オープンソース プロジェクト内での影響力と技術的方向性を決定付けるものです。
オープンソース プロジェクトは、独自のルール、慣習、ツール、そしてプロセスを持つ、多様かつ地理的に分散されたコミュニティで開発されます。端的に言うと、各コミュニティには独自の文化があり、オープンソースに影響力を発揮するために必要とされる信頼を確立し、協働の仕方を学び、文化を理解するには時間がかかるものです。
本ガイドは、ある組織が関与し、商業的に依存しているオープンソース プロジェクト内でリーダーシップと影響力を構築するための方法を説明します。リーダーシップの文化とプロジェクト内での役割、決定がどのように下されるか、組織がリーダーシップを構築できるかを学び、そしてオープンソース コミュニティで良いリーダーになるためのヒントを得てください。

目次

オープンソース プロジェクトでリーダーシップを構築する理由
オープンソースでのリーダーシップ文化
リーダーになる方法
まとめ

全ガイドを表示 »
GitHubへの貢献 »

本ガイドの貢献者

Gil Yehuda
オープンソース担当シニアディレクター
Oath（Yahoo＋AOL）

 
Guy Martin
ディレクター、Open@Autodesk
Autodesk

セクション 1

オープンソース プロジェクトでリーダーシップを構築する理由
オープンソース文化は協働的ではありますが、アップストリームの貢献はオープンソース プロジェクトを進展させる第一歩に過ぎません。プロジェクトが御社の自社製品にとって必要不可欠な場合、プロジェクトの方向性を導き、影響を与える上での積極的な役割を担うことも、またとても重要です。

オープンソース プロジェクトが、競合他社さえも巻き込んだ協働の価値を繰り返し証明してきた中で、プロジェクトの方向性に関して発言権がないことは、競争上の優位性を失うことにつながることは自明です。そして、これこそが、オープンソース プロジェクトでのリーダーシップを構築し維持することが企業の戦略と目標のカギとなる理由です。ただし、これは机をドンと叩いて主張したり、金銭的な影響力を振り回したりすればよいほど簡単なことではありません。

セクション 2

オープンソースでのリーダーシップ文化
企業がオープンソース コミュニティでのリーダーシップの仕組みについて考えるとき、会社内でのリーダーシップと同じように働くと考えることは、よくあることでしょう。しかし、それは違います。

「企業はしばしば『そうは言っても、私たちは大きな影響力を持つ企業です。強く要望を伝えれば、コミュニティに私たちの希望に添ってもらうことができるのでは？』と考えてしまう段階を通ります。彼らは程なく、その戦略が有効でないことに気付くでしょう。リーダーシップを獲得する唯一の方法は、努力してコミュニティ内での役割を得ることだと理解し始めます。そして、それを実現する唯一の方法は、信頼を獲得し、貢献することです」

Guy Martin氏 — Autodesk社のオープンソース担当ディレクター

御社がオープンソースでのリーダーシップ獲得を目指すべき理由
1.御社の製品がオープンソース ソフトウェアと技術（そしてそれを作るコミュニティ）に依存しているため。
2.リーダーシップが、御社にイノベーションへの近道と、成功要因に対しての付加価値に焦点を当てる能力を提供するため。
3.オープンソースがソフトウェアのエコシステムを規定しているため（別の言い方をすると「ソフトウェアの世界をオープンソースが侵食しているため」）。
4.ソフトウェアこそが新しい差別化要因であり、（ハードウェアと比較して）これからの中心的な価値が存在する領域であるため。ソフトウェアはすべての産業を再定義しつつあります。

企業VSオープンソース リーダーシップ
オープンソース プロジェクトでリーダーシップを獲得することが、商業の世界における企業自身の成功に欠かせないものである中で、そのように全く違った新しいアプローチを製品開発に取り入れることは、しばしば直感に反するものであり、始めは落ち着かないかもしれません。

従来の、プロプライエタリな開発は機密性と管理階層を必要とします。それと比較するとオープンソース開発では、役職や地位は意味をもたず、開示性と意見の一致が重要視されます。

コードの貢献こそが、オープンソース プロジェクト内での影響力と技術的方向性を決定付けるものです。それはコードの貢献についてのごまかしが利かないことを意味し、実際的で、プロジェクトを何らかの方法で真に進展させるものでなくてはなりません。

始めは、アップストリームに貢献し、協働することが自社の資産を放出しているように感じられるかもしれません。しかしその感情は、オープンソースの現実に基づくものというより、一般的に考え方、行動を大きく変化させるときの不安感から来る痛みによるものであり、イノベーションを起こすためには特に必要なものです。

オープンソース リーダーシップの考え方には、以下の項目に関して考えることが含まれます。

- 制御力ではなく、影響力
- 露出としてではなく、クラウド ソーシング ソリューションの一つの方法としての透明性
- 群れを統制することではなく、指揮すること

プロプライエタリからオープンソースの考え方と文化への移行を成功させるには、時間と努力、そしてときにそれを実行することの利益について定期的に思い出すことを必要とします。Samsung Electronics社のR&D担当バイスプレジデント兼オープンソース グループ主席であるIbrahim Haddad氏は、参照しやすいように以下のチャートを作成しました。

共同開発に適応する必要性

文化
開発モデル
協働
透明性
実力主義


プロセス
貢献
ガバナンス
承認
運用モデル
コンプライアンス


ツール
ITインフラ
開発ツール
知識の共有
コードの再利用


人事
チームの形成
組織的
雇用習慣
指標

協働的なオープンソース開発は、新しいスキルの獲得と自社の持つ既存の文化、プロセス、ツールを適応させることを必要とします。

この採用からはどのような利益が期待できますか？
- グローバルな開発コミュニティと開発コストを共有すること。
- 研究開発のコストを削減すること。
- さらなる差別化に焦点を当てることでイノベーションを促進すること。
- 製品開発の加速。

ガバナンスの概要
オープンソース コミュニティにおけるガバナンス ガイドラインは、項目が少ないことがほとんどですが、それでもなお、厳格に執行されています。行動規範またはコミュニティ ガイドラインはそのコミュニティ固有のものですが、一般的に許容できる、および期待される行動、そして許容できない行動またはその他のインシデントの取り扱いについて言及します。ガバナンス ポリシーはオープンソース プロジェクトのポリシー、構造とロードマップの管理について詳細を規定します。メンテナンス ポリシーは通常、ソフトウェア更新など、その他のプロジェクトに関する決定について規定します。

ただしプロジェクトとコミュニティのレベルにおける、そしてその周囲のガバナンスは、ガバナンスポリシーおよび問題の全体性を表しません。また、オープンソース ソフトウェアが商業的な利益のため、またはその他の組織により消費される、貢献する、再配布および／または製造されるポイントにも、そのようなガバナンスが存在します。つまり、オープンソース ガバナンスは必然的に、より広範なITガバナンスの取り組みの一部であると言えます。

オープンソース消費方法にまつわる複数のプロセス、コミュニティへアップストリームの貢献をするための方法に一貫性がないこと、オープンソース プロジェクトが社内で作成される際の差異など、企業は同じような問題を経験する傾向にあります。標準化されたガバナンスを一式開発することが、混乱を鎮めるカギとなります。

Martin氏はこう発言しています。「私たちはアップストリームの貢献について単一のプロセスを目指していました。エンジニアの一人として私は、それを効率化したいと望んでいました。500ページにもわたる文書を用意し、たった5行のバグを修正する10週間のプロセスのような規模の作業にはしたくありませんでした。ですから、法務と協力してワークフローを効率化して、エンジニアが妥当な期間内に達成できるようにしました。そして私たちは、社内にあるコードからオープンソース プロジェクトを作成することについても同様に取り組みました」

Guy Martin氏 — Autodesk社のオープンソース担当ディレクター

それぞれの企業が、実際の取り組みに最も合うように自社のオープンソース ガバナンス ポリシーおよびプロセスの具体的な内容を検討することが最善です。これは実際にコミュニティレベルでガバナンスが最も効果的に発揮される方法とよく似ています。ただし、御社内でのすべてのオープンソース活動で、同一のプロセスを繰り返すことができるわけではないことに注意してください。

一貫性のあるガバナンス計画は大きなバージョン間の歪曲や、オープンソース ライセンスとセキュリティの問題についても防止します。「オープンソース消費についての一貫性のあるガバナンス モデルは、コンプライアンス保証に役立ち、私たちが何かを出荷するときには正しいライセンスへのコンプライアンスが実践されていると確信することができます」

オープンソース コンプライアンス
コンプライアンス管理の6つの重要要素

1.製品リポジトリ内で使用されているオープンソースの特定。
2.ソースコードの監査と、見つかった問題の解決。
3.アーキテクチャ分析および法務的レビューの完了。
4.ソフトウェア インベントリーの更新と、適切なオープンソース通知を反映するための製品文書の更新。
5.製品出荷前の全手順検証の実践。
6.オープンソース ライセンスの義務を果たす一環として、ソースコードを入手可能にすること（当てはまる場合）。

THE LINUX FOUNDATION 
Ibrahim Haddad


文化の概要
ある組織の社内文化をオープンソースの考え方に変遷させる危急の必要がある中で、それは社外にあるオープンソース コミュニティを見失うこと、切り離されることなく実現されなくてはなりません。

「オープンソース プロジェクト上での影響力を得るために、あなたは良く知らない、他の会社で働く、別の目的を持った人々の一団に、自分の意見に賛成してもらわなくてはなりません」

Gil Yehuda氏 — Oath（Yahoo+AOL）のオープンソース担当シニアディレクター

それはしばしば口で言うほど簡単なことではありません。争いや反対はよく起こり、解決策はコミュニティの意見の一致によっては多くの方向性のうち一つを必要とすることもあります。

Yahuda氏はこう解説しています。「オープンソース コミュニティには、さまざまな企業に勤める人が集っており、多くの領域では共通の目的や成果を持っていますが、一部の領域ではそれぞれの主張や相反する目的を持っているかもしれません」

たとえば、何かを動かすために必要な新機能を望む開発者の一団がいる場合、その新しい機能は安定性を望む他のグループには反対される可能性があります。

Yahuda氏はこう続けます。「新機能が安定性や拡張性を悪化させるかもしれません。それについて紛争が起きるか、少なくとも緊張が走るでしょう」

決定を下す責任を負う人がいるわけではないことを考慮すると、プロジェクトがいずれか一つの方向に前進するように問題を解決することは容易ではありません。その代わり、それはコミュニティとしての決定になります。

「コミュニティが、あなたが望ましいと思う解決策に到達する助けになることの一つとして、プロジェクト内でのあなたの影響力を大きくすることがあります。あなたにリーダーシップがあり、コミュニティで信頼を集めるメンバーとしてコミュニティの利益のことを想っていれば、彼らは短期的には小規模であれ彼らにとってマイナスの影響を及ぼす決定についても、あなたに賛成してくれるでしょう」

Gil Yehuda氏 — Oath（Yahoo+AOL）のオープンソース担当シニアディレクター

そのリーダーシップを構築し維持することは、個別の開発者の目標であると同時に会社のミッションでもあります。

Oathのアプローチは、所属する開発者たちが潜在的に争いにつながりそうな状況に直面した際は、会社の支援を求めるよう指示することでした。

Yahuda氏はこう発言しています。「私たちは活発な相談事業を実践し、状況と、それに対する最善のアプローチについて社内での話し合いを持ち、開発者がお互いに逸話と、解決策を共有するようにしています」

また、リーダーシップは企業ではなくその個人と共にあることを理解することが重要です。個別の開発者が、その雇用者からの援助と支援を受けられるのにもかかわらず、雇用者自身には、その開発者が退社することで影響力を失うリスクがあります。

「御社の製品にとってとても重要なオープンソース プロジェクトがあり、御社からアップストリームの貢献をしている人物が一人しかいない場合、御社は単一障害点を抱えていると同じです。後継者育成計画を設定し、常時二人以上の人員を関わらせる必要があります」

Guy Martin氏 — Autodesk社のオープンソース担当ディレクター

それは、御社から複数の人員がアップストリームの貢献をしていくことを意味します。そのようなアイディアに対するよくある反応として、他の会社もそこから利益を得られるオープンソース プロジェクトに多くの人材を拘束される、という恐れがあります。しかし、それらの人員の時間をうまく調整すれば、そのようなことはありません。

Martin氏はこう発言しています。「3から4名の他の開発者とその負担が共有されているため、アップストリームの貢献をするために使われるある開発者の時間が減るということは、エンジニアリング管理に取ってより好ましい状態です。」

仕事の負荷のバランスを取ることで、主要な役割を担う開発者が退社して会社が影響力を失うリスクも減らすことができます。積極的にコミュニティ内でのリーダーシップ構築に参加しようとする開発者自身にとっても、結果的に自分のキャリアと収益力を高められるため、これは魅力的なプランです。このプランでは、より多くの開発者が主席の役割を獲得できます。

さらに、企業は文化をオープンソースに移行し、イノベーションと成功の速度を向上して、オープンソース コミュニティとのつながりをさらに深めて、リーダーシップを構築し開発者にとっての魅力を増すため、インナー ソーシングを通じて社内でオープンソースの実践と理念を取り入れることができます。

インナー ソーシング
インナー ソーシングはオープンソースの共同開発で使用されている理念と実践と同じものを、社内の全社横断的プロジェクトで採用することを指す用語です。

12の推奨されるベストプラクティス
1.試験方法を改善、自動化し、開発プロセスのなくてはならない部分とする。
2.ピア レビューを実行し、実践を自動化するためのツールを実装する。
3.組織の全員がソースコードにアクセスできるようにする。
4.協働サポートが組み込まれた開発ツールを採用する。
5.「早く、何度もリリースする」哲学を取り入れる（より短期間で、頻度の高いリリース）。
6.コードの再利用ができる、拡張可能でモジュール式のアーキテクチャを構築するために時間と労力を投資する。
7.継続的な統合アプローチを採用する。
8.流動的でオープンなコミュニケーションを奨励し、実践する。
9.文書化の実践を改善し、品質保証の追加の方策として使用する。
10.プロジェクトに参加していない人々でもコードをコミットできるようにする。
11.意思決定プロセスの透明性を促進する（信頼を確立する）。
12.貢献度合いにより個人に力を与える（実力主義）。

まとめると、リーダーシップを構築、維持するという目標を掲げている場合、文化はたくさんの意味合いと多くのレベルで必要不可欠なものであり、故に重要プロジェクトではコントロール対策も欠かせません。

すべてを通して、1パーセントルールにも気を付けましょう。Intel/YoctoプロジェクトのJeff Osier-Mixon氏は、こう説明しています。「90%は流れに身を任せ消極的に参加します。これがユーザーコミュニティです。9%は積極的に参加し、バグを報告し、公に質問に回答します。私たちはこれらの人々を『貢献者』と呼びます。1%はプロジェクトを指揮またはコントロールする手助けをします。これらの人々は『保守者』あるいはもっと簡単に言うと『リーダー』です」

それぞれのプロジェクトはユニークなものですので、プロジェクトごとに適応させましょう。

共同プロジェクトにおけるリーダーシップの役割
役割は企業での役割と構造に類似しているように見えますが、すべてのプロジェクトは異なり、特定のコミュニティ ガイドラインとガバナンス ポリシーによって構造化及び管理されています。文書をよく読み、リアルタイムのプライベートなチャットのためIRCに加入し、メーリングリストを購読するなどして、どのように役割が定義されるか、プロジェクトが構造化され、管理されるかについての指導を得ましょう。

それを実行するまでの間、よくあるタイプのリーダーシップの役割の一部については以下の項目が一般的な理解を助けます。

技術的リーダーシップ

- コミットする人／保守者
- TAB/TSCメンバー
- TSC議長／主任アーキテクト
- 文書／テクニカルライター - 「これは特別なケースの保守者です」

ガバナンスでのリーダーシップ

- エグゼクティブ ディレクター
- 委員会／準委員会
- 役員会メンバー／メンバー代表者

運用上のリーダーシップ

- プロジェクト マネージャー
- コミュニティ マネージャーと賛同者

リーダーシップの役割マトリクス
これらの役割は、歴史的な管理階層の従来型の同等の役割と似通ってはいますが、同じではないことを忘れないでください。古い、クローズドな時代のモデルの価値、プロセスと理念を新しいオープンソースモデルへ単純に置き換えることはできません。多くの点で、それらはまったく正反対のもの、あるいは鏡に映ったイメージであると言えます。とにかく、それらはあらゆる重要な点において異なります。一つを選ぶことで、もう一つを拒否することになります。

オープンソースにおけるリーダーは、リラックスしていて、透明性の促進さえにも取り組み、プロジェクトを前に進める前に意見の一致に到達しなくてはなりません。そのプロセスとリーダーシップのスタイルは従来のビジネス構造に縋りつきたいと望む人々にとっては、神経を逆なでされるようなものです。

この劇的な文化の変化でしばしば直面される不満に応えて、Martin氏は次のような流れになると説明しています。「多くの企業は、抵抗が最小限になる道を選びます。それは『これはすごい。まずはこれをベースに始め、これを取り交ぜれば社内では自分のやり方でやれるだろう』という受け取られ方です。

問題は長期的にそれが持続可能で拡張可能ではないということです。なぜなら、コミュニティの他の部分から離れれば離れるほど、コミュニティから取り入れたい次の大きなアップグレードが行われたとき、より大きな困難に見舞われるからです」

端的に言うと、オープンソースとはコミュニティによる取り組みであり、そのコミュニティから自分の仕事を引き離す行動はいずれ、御社の不利益につながるということです。

セクション 3

リーダーになる方法
協働的な環境でリーダーになるためには、相当の対人スキルと、あらゆる仕事を自分の地位に相応しくないと言って断らないという意欲が必要です。

「それは、何かを実行しなくてはならないことに気付くことと同じくらい簡単なことです。バグを記録し、質問に答え、展示会でブースに立つことを引き受けるようなことです」

Jeff Osier-Mixon氏 — Intel社のオープンソース コミュニティ マネージャー

そして、もちろん、それはオープンソースにおける重要な技術的スキルと、それらを果敢に使いこなす大胆さを必要としますが、これらについてはあなたがそのコミュニティの状況を詳しく調べ、グループのダイナミクスを理解し、自分自身で割に合わない仕事を請け負ってからの話です。

言い換えると、リーダーになることはグループの尊敬を勝ち取ることから始まります。あなたはそれを要求することはできません。自ら勝ち取らなくてはなりません。

あなたのスキルを証明し、リーダーシップを勝ち取るためにはどこから参入するべきか
プロジェクトは通常、委員会への参加方法、保守者のなり方、およびあらゆるレベルでの参加方法を文書化しています。それらの文書を見て、グループに馴染み始めるべき場所を見つけましょう。どこからでも、好きなところから始められますが、ただ列に割り込むことだけは避けましょう。

「影響力を得るためにできることの一つとして、話を聞き、理解し、飛び込む前に状況を読むために心からの努力をすることがあります。そのような習慣を時間と共に身に付けられれば、人々はあなたの貢献を尊重するようになり、あなたはより大きな影響力を手にすると、私は思います」

Gil Yehuda氏 — Oath（Yahoo+AOL）のオープンソース担当シニアディレクター

オープンソース カンファレンスも、コミュニティ内の他の開発者、リーダーシップに出会うすばらしい場を提供します。ネットワーキングだけでなく、そのようなイベントで発表することは、オープンソース コミュニティへのあなたの、そして自社の実績と貢献を共有するための注目すべき方法です。

Yehuda氏は彼の会社、Oathが、開発者の発表スキルを高め、具体的な発表内容を洗練させることで、ステージ上での成功を助けていると発言しています。練習することで完璧に発表をこなすことができるようになるため、開発者が発表をすればするほど、発表の能力が高まります。そしてオープンソース コミュニティで彼らの顔、名前と仕事がさらに有名になります。

ただし、やはりアップストリームの貢献が、あなたの経歴と評判を確立するために最も効果を発揮します。飛び込んでいって、見つけたところでバグを修正し、自分のプロジェクトだけでなくコミュニティ全体の役に立つ貢献をしましょう。

プロジェクトに参入するVSプロジェクトを作成する
プロジェクトに参入することは、リーダーシップの地位まで遠い道のりに感じられるかもしれません。確かに、時間はかかります。ただし、コミュニティが既に行ってきた仕事からすぐに利益を得られること、自分のプロジェクトを立ち上げるコストがかからないことなど、参入には利点もあります。

リーダーシップを確立するために自分のプロジェクトを始めることは、あなたに多くをもたらしません。

Martin氏は次のようにコメントしています。「あなたたちがもし砂場にいる唯一の子供のグループだったら、そして全員が同じ会社に勤めていたら、本当にあなたたちはリーダーであると言えますか？それとも、単にそのプロジェクトで働いている関係者ですか？」

もしあなたがプロジェクトを始めるなら、リーダーシップを確立するという理由以外の理由で実行しましょう。なぜなら、率直に言ってそのプロジェクトに誰も参加しない場合があるからです。それは、あなたのプロジェクトが非常にすばらしいものではない場合、または既に確立されたプロジェクトと競合する場合、特に当てはまります。

「プロジェクトを立ち上げるには、多くの労力が必要となります。あなたのコードが別のプロジェクトに貢献して、コードの貢献に基づいてそのプロジェクトであなたがリーダーになれる可能性があるなら、新しいプロジェクトを立ち上げることはやめておきましょう」

Guy Martin氏 — Autodesk社のオープンソース担当ディレクター

新しいオープンソース プロジェクトを立ち上げる前に自問すべき質問集

1.既存のオープンソース プロジェクトの取り組みに加わることはできますか？
2.OSSモデルを使ってそのプロジェクトを立ち上げ、維持できますか？
3.成功の構成要素とは何ですか？成功をどのように測定しますか？
4.プロジェクトを経済的に支援できますか？社内に首席となるような優れた人材がいますか？
5.そのプロジェクトは（最初から）社外の企業の参加を集められますか？
6.開発者のコミュニティを形成し、成長させるに十分な外部からの関心がありますか？

技術的貢献
コードの寄付は、オープンソース コミュニティにとって深刻な問題です。プロジェクトの構築は、まさに共同課題を掲げることの真意です。多くの手があれば、仕事は軽くなり、多くの貢献があれば、リスクは減少し品質は高まります。とにかく、それらが目標となります。

鉄則は、あなたの貢献を自分だけに役立つものでなく、必ず他の人にとって有用なものにすることです。ただし、有用性は大きな進展に限定されるものではありません。小さなバグの修正やその他の微調整も感謝されるものです。重要なのは、あなたからの貢献を、その規模に問わず誰にでも役立つものにすることです。

Ibrahim Haddad氏もまた、貢献者たちに正しいコーディング スタイルを踏襲し、プロジェクトの提案過程の範囲内で働き、文書と説明を提供し、フィードバックに耳を傾け、辛抱強く承認を待つように忠告しています。

アップストリーム活動のベストプラクティス
所属組織内部で
- アップストリーム活動は正しい理由のために決定すること。
- アップストリーム活動を念頭にコードを設計、実装すること。
- 簡単な関与でもよいので、自社の開発者をオープンソース プロジェクトに関与させ続けること。

プロジェクトに向けて外部へ
- 自社の貢献が、他者にとって有用であるようにすること。
- 適切なコーディングのスタイルを踏襲すること。
- プロジェクトの提案過程の範囲内で仕事をすること。
- あなたからの貢献について文書と説明を提供すること。
- フィードバックに耳を傾け、それについて対応すること。
- 辛抱強く、承認を得るまでコードを修正すること。

人材の採用
オープンソース開発者が足りていないことは、周知の事実です。オープンソース プロジェクトの採用が高まるばかりで、鈍化の兆しを見せていないことを考えると、しばらくの間はこの状況が変わらない可能性は高いでしょう。これはスキルのある開発者を見つけるのが困難であることだけでなく、彼らを引き留めることが難しいことも意味します。

2016年のクラウド ファンドリー レポートでは、「米国だけで25万のソフトウェア開発者の就職口があり、技術スキルを必要とする空きポストが50万ある」ことが報告されました。さらに、アナリストは埋められない開発者のポスト数が「次の十年間で100万名分に達する」と予測しています。

オープンソース開発者の需要はそれよりも熾烈なものです。

それでも、オープンソース コミュニティにおいて誰がリーダーか、誰が定期的に参加しスキルのある貢献者かを知り、彼らを直接雇用しようと試みることができます。あるいは、彼らに一緒に働きたいと思う開発者を推薦してもらうこともできます。

Martin氏は次のように説明しています。「保守者、または強力な貢献者を雇用しようと計画しているなら、それらの人々の需要が高いこと、世界で最も仕事に柔軟性を持つ人々であることを念頭においてください。それは、彼らが会社を渡り歩いても、同じプロジェクトに取り組むことができることを意味します。何か変わることと言えば、彼らの給料の小切手に署名する会社名だけです」

オープンソース開発者の採用活動についてのさらなる助言については、Linux Foundationのガイド『オープンソース開発者の採用』を参照してください。

人材を育成する（最善策）
幸運なことに、オープンソースはとても熱を持った需要があるため、開発者たちは開発に携わる、またはオープンソースでの才能を洗練させる機会を積極的に探しています。Martin氏は、彼がこれまでにインタビューした開発者は全員、彼自身のオープンソース ブランドを構築する上で、会社がどのような支援をしてくれるかと聞いてきたと言います。開発者がオープンソース コミュニティでリーダーシップを取るような人材に成長することを助けることは、最も活性化させる方法であり、採用の価値ある武器となります。

自社のオープンソースの仕事の認知度を高めることは、結果的に開発者の採用にも役立ちます。一部の会社では、魅力を高めるためにオープンソースに関するトレーニングさえも提供しています。展示会で会社のオープンソース プロジェクトを発表すること、コミュニティでコードに貢献することは、自社の認知度を高める最善の方法です。自社の開発者に、他の開発者とネットワークを作って、入社を誘うように依頼することも、うまくいくことが多いようです。

開発者を惹きつけるためのもう一つの重要なアプローチ方法は、実習期間を提案することです。開発者は、自分の評判を構築できる挑戦の機会が多くある重要なプロジェクトに携わることを好みます。実習やメンターシップのプログラムの提供は、入社のきっかけとしての魅力を追加し、既に社内にいる人材も活用できる優れた方策です。

何よりも、コミュニティの信頼を得ることで、オープンソース開発者、そして信頼できるオープンソース リーダーで働くことでキャリアを前進させたい開発者にとって自社の魅力を高めることができます。

「他の誰もと同様、商業的なモチベーションを持った開発者は、彼らの貢献の質と量を通してプロジェクトでの影響力を獲得します」- オープンソース ガイド、GitHub、リーダーシップおよびガバナンス、企業従業員。

戦略的な貢献
戦略的な貢献は、リーダーシップの確立に必要不可欠なものです。このような貢献はエコシステムを横断して共有されている大きな問題に対応する、あるいはプロジェクトをコミュニティが設定したゴールラインを超えて勧める、重要な進展を提供する傾向にあります。

ただし、単にコードをリリースしてそれを放置することはできません。文書の提供、エコシステムの拡張、そのコードまたはツールセットをさらに進展させるためにパートナーシップを組むなど、たくさんの仕事があります。活動を続けること、認知度と信頼性を保つことがカギとなります。

技術以外の貢献と支援
技術的、戦略的、その他の貢献以外にも、コミュニティに貢献し、支援して結果的にリーダーシップ構築を推進する方法があります。

そのような方法には、開発者の教育に貢献し、支援することと、メンターシップの提供が含まれます。技術的な要素に支援を提供することは、リーダーシップ確立の成功をもたらすもう一つの方法です。

重要なのは、よく観察してコミュニティが技術的貢献以外に何を必要としているかを見極め、そのうちの一部に貢献するため、さらに力を入れることです。

セクション 4

まとめ
要約すると、良いリーダーになること、影響力を獲得することには時間と大きな努力を必要とします。

リーダーになるための具体的な方法には以下が含まれます。

- OSSプロジェクト文化、実践とツールに適応すること。プロジェクトになじみ、ルールとプロセスに従うよう努力しましょう。中心になるのはあなたではなく、プロジェクトであることを忘れないでください。
- 単調でつらい仕事をすること。プロジェクトはスターだけではなく、縁の下の力持ちを必要としています。それに、仕事ができなければ、指揮する権利を勝ち取れません。あなたは仕事ができること、必要な仕事を進んでやることを、すばやくコミュニティに示しましょう。
- 寛大さを示すこと。プロジェクト全体に利益をもたらすようにコードで貢献しましょう。
- 合意を形成すること。真のリーダーは合意を形成することができます。リーダーになる前でも、あなたがスタンドプレイをする人でも、暴君のような人でもないことを証明するため、意見の一致に達する手助けをしましょう。
- リーダーシップは変わっていくことを受け入れること。リーダーシップの役割が、人々を雇用する企業ではなく、人々と共に動くという事実を認識し、受け入れましょう。

これらの資料はTODO（Talk Openly, Develop Openly）グループとのパートナーシップの下で作成されました。このグループはLinux Foundationのプロフェッショナル オープンソース ネットワーキング グループです。これらの包括的なガイドの制作に時間と知識を貢献して下さったオープンソース プログラムのマネージャーの皆さんに深く感謝します。参加している企業にはAutodesk、Comcast、Dropbox、Facebook、Google、Intel、Microsoft、Netflix、Oath （Yahoo + AOL）、Red Hat、Salesforce、Samsung、VMwareが含まれます。詳しくはtodogroup.orgをご覧ください

本事業はクリエイティブ コモンズ表示 - 継承 4.0 国際ライセンス（CC BY-SA 4.0）に則ってライセンス化されています。

